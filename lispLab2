;
;               {1 , l2=0
;ex1([l1...ln])={1 + ex1([l3...ln]) , l2=1
;               {1 + max(ex1(list subtree 1) , ex1(list subtree 2)) , l2=2
;
(defun ex1(l)
  (cond
   ((equal (car (cdr l)) 0) 1)
   ((equal (car (cdr l)) 1) (+ 1 (ex1 (cdr (cdr l)))))
   ((equal (car (cdr l)) 2) (+ 1 (max (ex1 (mleft (cdr (cdr l)))) (ex1 (mright (cdr (cdr l))))) ) )
  )
)


;
;                    {l , p=0
;right([l1...ln] ,p)={right([l2...ln] ,p-1) , p!=0
;
;
(defun mright(l) (right l (poz 1 l 0)) )

(defun right(l p)
  (cond
   ((equal p 0) l )
   (T (right (cdr l) (- p 1)))
  )
)

;
;                   {nil , p=0
;left([l1...ln], p)={l1 U left([l2...ln], p-1) , p!=0
;
;
(defun mleft(l) (left l (poz 1 l 0)) )

(defun left(l p)
  (cond
   ((equal p 0) nil )
   (T (cons (car l) (left (cdr l) (- p 1) )))
  )
)

;                     {p , c=0
;                     {poz(c-1,[l3...ln],p+2) , l2=0
;poz(c, [l1...ln], p)={poz(c,[l3...ln],p+2) , l2=1
;                     {poz(c+1,[l3...ln],p+2),l2=2
;
(defun poz(c l p)
  (cond
   ((equal c 0) p )
   ((equal (car (cdr l)) 0) (poz (- c 1) (cdr (cdr l)) (+ p 2) ))
   ((equal (car (cdr l)) 1) (poz c (cdr (cdr l)) (+ p 2)  ))
   ((equal (car (cdr l)) 2) (poz (+ c 1) (cdr (cdr l)) (+ p 2) ))
  )
)

(defun test()
  (and (equal (ex1 `(A 2 B 0 C 2 D 0 E 0)) 3)
       (equal (ex1 `(A 2 B 2 D 0 E 0 C 1 F 1 G 0)) 4)
       (equal (ex1 `(A 1 B 1 C 1 D 0)) 4)
       (equal (ex1 `(A 0)) 1)
  )
)